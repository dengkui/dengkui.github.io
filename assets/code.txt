library(rJava)
library(Rwordseg)
library(RColorBrewer)
library(reshape2)
library(ggplot2)
library(wordcloud)
library(plyr)
library(dplyr)
data <- read.csv(file.choose(),colClass="character")
poem <- data.frame(Author = data$Author,Title = data$Title,Sentence = data$Sentence)
#对作者和词牌进行篇数统计
aucn <- xtabs(~Author+Title , data = poem )
df_aucn <- as.data.frame(aucn)#作者词牌数据框
library(reshape2)
names(df_aucn) <- c("Author","Variable","Value") #这儿应该按照标准流程，先melt
sdf_aucn <- dcast(df_aucn , Author~Variable )#作者和词牌交叉矩阵
#df_a <- apply(sdf_aucn,1,sum)  作者篇数数据框
df_a <- dcast(df_aucn,Author~.,sum) #作者篇数数据框
names(df_a) <- c("Author","Freq") 
df_a <- arrange(df_a,desc(Freq)) #降序排序
df_c <- dcast(df_aucn,Variable~.,sum) #词牌篇数数据框
names(df_c) <- c("Title","Freq")
df_c <- arrange( df_c,desc(Freq))
#绘制作者创作数量的直方图以及密度图
p <- ggplot(df_a,aes(Freq))+xlim(100,700)#选定绘制范围
p + geom_histogram(aes(y = ..density..),binwidth = 5)+geom_density(colour = I('red')) #绘制作者创作密度图
p + geom_freqpoly(aes(y = ..density..),binwidth = 5)+geom_density(colour = I('red')) #绘制密度曲线图
p + geom_histogram(binwidth = 1)+geom_density(colour = I('red')) #绘制作者创作数量直方图
ggplot(df_a,aes(Freq))+stat_bin(aes(size = ..count..),colour = "darkred",geom="point")+xlim(1,100) #绘制作者创作数量散点图
#查看词牌的使用作者数量
sdfn_aucn <- sdf_aucn[,-1]
sdfn_aucn[sdfn_aucn == 0] <- NA
cpsy <- function(x){
return(sum(!is.na(x)))
}
n_cpsy <- apply(sdfn_aucn , 2,cpsy)
df_cpsy <- data.frame(cp = names(sdfn_aucn),sy = n_cpsy )
write.csv(cpsy,"cpsy.csv")
#绘制词牌密度图
#划定一个下界值，取其上 作者>200 词牌>200
sau <- df_a$Author[2:18]
sau <- as.vector(sau)
scp <- df_c$Title[1:24]
scp <- as.vector(scp)
#作者和词牌进行交叉条件选取，选取后的作为待分析数据 
ssdf1_aucn <- filter(sdf_aucn , Author %in% sau)
ssdf_aucn <- select(ssdf1_aucn ,one_of(scp))
#绘制作者和词牌之间的热力图
#windowsFonts(HEL=windowsFont("Helvetica CE 55 Roman"),RMN=windowsFont("Times New Roman"), ARL=windowsFont("Arial"))  不采用这个方法
mssdf_aucn <- melt(ssdf_aucn)
mssdf_aucn$lab <- cut(mssdf_aucn$value , breaks = c(10,20,30,40,50,60,70) , labels = c('D','G','M','N','Q','B'))
library(showtext)
library(Cairo)
font.add("f","Far_Chehre.ttf")
font.families() #查看字体
CairoPNG("sac1.png", 600, 700) # 打开图形设备
showtext.begin()
ggplot(mssdf_aucn, aes(x=Author, y=variable, fill=value))+
labs( title="HeatMap：作者和词牌名")+theme(axis.title = element_blank())+
geom_tile()+geom_tile(color="white", size=0.1)+
scale_fill_gradient("篇数",low='lightblue', high="darkred")+
theme(axis.text.x  = element_text(family = "wqy",size= 20 ,angle = 270))+theme(axis.text.y  = element_text(family = "wqy",face = "bold",size = 15 ))+
theme(plot.title = element_text(family = "wqy",size = 30))+theme( plot.background = element_rect( fill = "lightblue"))+theme( panel.background = element_rect( fill = "lightblue"))+theme(legend.background = element_rect( fill = "lightblue"))+theme(axis.ticks = element_blank())+theme(panel.grid.major = element_blank())
showtext.end()
dev.off()
#绘制带数值的热力图,只绘制大于10的
mssdf_aucn$lab1 <- ifelse(mssdf_aucn$value < 10 , NA , mssdf_aucn$value) 
CairoPNG("sac2.png", 600, 700) # 打开图形设备
showtext.begin()
ggplot(mssdf_aucn, aes(x=Author, y=variable, fill=value))+
labs( title="HeatMap：作者和词牌名")+theme(axis.title = element_blank())+
geom_tile()+geom_tile(color="white", size=0.1)+
scale_fill_gradient("篇数",low='lightblue', high="darkred")+
geom_text(aes(label = lab1),size=7)+
theme(axis.text.x  = element_text(family = "wqy",size= 20 ,angle = 270))+theme(axis.text.y  = element_text(family = "wqy",face = "bold",size = 15 ))+
theme(plot.title = element_text(family = "wqy",size = 30))+theme( plot.background = element_rect( fill = "lightblue"))+theme( panel.background = element_rect( fill = "lightblue"))+theme(legend.background = element_rect( fill = "lightblue"))+theme(axis.ticks = element_blank())+theme(panel.grid.major = element_blank())
showtext.end()
dev.off()
#给热力图添加表情符号
library(ggplot2)
library(showtext)
library(Cairo)
font.add("f","Far_Chehre.ttf")
font.families() #查看字体
CairoPNG("sac.png", 800, 1000) # 打开图形设备
showtext.begin()
ggplot(mssdf_aucn, aes(x=Author, y=variable, fill=value))+
labs( title="HeatMap：作者和词牌名")+theme(axis.title = element_blank())+
geom_tile()+geom_tile(color="white", size=0.1)+
scale_fill_gradient("篇数",low='lightblue', high="darkred")+
geom_text(aes(label = lab),family = "f",size=10)+
theme(axis.text.x  = element_text(family = "wqy",size= 20 ,angle = 270))+theme(axis.text.y  = element_text(family = "wqy",face = "bold",size = 15 ))+
theme(plot.title = element_text(family = "wqy",size = 30))+theme( plot.background = element_rect( fill = "lightblue"))+theme( panel.background = element_rect( fill = "lightblue"))+theme(legend.background = element_rect( fill = "lightblue"))+theme(axis.ticks = element_blank())+theme(panel.grid.major = element_blank())
showtext.end()
dev.off()
#开始分词
#思路：对每一首词分词后，与作者形成一个数据框，author,words，然后进行行合并，形成结果数据框，然后利用melt,dcast进行转变，
words <- segmentCN(data$Sentence)
names(words) <- data$Author
Words <- melt(words)
#有可能需要删除内存rm(list = ls())
rm(list = ls(pat = "^w"))
FWords <- xtabs(~L1+value,data = Words )
df_FWords <- as.data.frame(FWords)
df_FWords <- melt(df_FWords,id = "L1")  # 内存太大,无法运行,可以挑选个别作者进行分析
#统计单词个数
fwords <- table(Words$value)
ffwords <- as.data.frame(fwords)#转换不了是因为中英文格式问题
names(fwords) <- c("Word","Freq")
ffwords <- arrange(ffwords,desc(Freq))
#对ffwords进行拆分，挑选出单个词和两个字的词
ffwords$Var1=as.character(ffwords$Var1)
word2 <- subset(ffwords,nchar(ffwords$Var1) >1 )
word1 <- subset(ffwords,nchar(ffwords$Var1) ==1 )
library(RColorBrewer)
library(wordcloud)
mycolors=brewer.pal(12,"Paired")
wordcloud(word2$Var1,word2$Freq,random.order=F,random.col=F,colors=mycolors,max.words = 300)
wordcloud(word2$Var1,word2$Freq,random.order=F,random.col=F,colors=mycolors,max.words = 100)
wordcloud(word1$Var1,word1$Freq,random.order=F,random.col=F,colors=mycolors,max.words = 300)

